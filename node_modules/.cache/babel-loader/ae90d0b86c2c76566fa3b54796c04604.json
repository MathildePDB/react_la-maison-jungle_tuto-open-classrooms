{"ast":null,"code":"var _jsxFileName = \"/home/mpdb/Projects/la-maison-jungle/src/components/CareScale.js\";\nimport Sun from \"../assets/sun.svg\";\nimport Water from \"../assets/water.svg\"; // Ici, il s'agit d'une manière de faire.\n//Vous auriez aussi pu utiliser une fonction qui retourne l'élément souhaité, ou bien faire directement des conditions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst quantityLabel = {\n  1: 'peu',\n  2: 'modérément',\n  3: 'beaucoup'\n};\nfunction CareScale({\n  scaleValue,\n  careType\n}) {\n  const range = [1, 2, 3];\n  const scaleType = careType === 'light' ? /*#__PURE__*/_jsxDEV(\"img\", {\n    src: Sun,\n    alt: \"sun-icon\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 4\n  }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n    src: Water,\n    alt: \"water-icon\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 4\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => alert(`Cette plante requiert ${quantityLabel[scaleValue]} ${careType === 'light' ? 'de lumière' : \"d'arrosage\"}`),\n    children: range.map(rangeElem => scaleValue >= rangeElem ? /*#__PURE__*/_jsxDEV(\"span\", {\n      children: scaleType\n    }, rangeElem.toString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 6\n    }, this) : null)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 3\n  }, this);\n}\n_c = CareScale;\nexport default CareScale;\nvar _c;\n$RefreshReg$(_c, \"CareScale\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","quantityLabel","CareScale","scaleValue","careType","range","scaleType","src","Sun","alt","fileName","_jsxFileName","lineNumber","columnNumber","Water","onClick","alert","children","map","rangeElem","toString","_c","$RefreshReg$"],"sources":["/home/mpdb/Projects/la-maison-jungle/src/components/CareScale.js"],"sourcesContent":["import Sun from '../assets/sun.svg'\nimport Water from '../assets/water.svg'\n\n// Ici, il s'agit d'une manière de faire.\n//Vous auriez aussi pu utiliser une fonction qui retourne l'élément souhaité, ou bien faire directement des conditions\nconst quantityLabel = {\n\t1: 'peu',\n\t2: 'modérément',\n\t3: 'beaucoup'\n}\n\nfunction CareScale({ scaleValue, careType }) {\n\tconst range = [1, 2, 3]\n\tconst scaleType =\n\t\tcareType === 'light' ? (\n\t\t\t<img src={Sun} alt='sun-icon' />\n\t\t) : (\n\t\t\t<img src={Water} alt='water-icon' />\n\t\t)\n\n\treturn (\n\t\t<div\n\t\t\tonClick={() =>\n\t\t\t\talert(\n\t\t\t\t\t`Cette plante requiert ${quantityLabel[scaleValue]} ${\n\t\t\t\t\t\tcareType === 'light' ? 'de lumière' : \"d'arrosage\"\n\t\t\t\t\t}`\n\t\t\t\t)\n\t\t\t}\n\t\t>\n\t\t\t{range.map((rangeElem) =>\n\t\t\t\tscaleValue >= rangeElem ? (\n\t\t\t\t\t<span key={rangeElem.toString()}>{scaleType}</span>\n\t\t\t\t) : null\n\t\t\t)}\n\t\t</div>\n\t)\n}\n\nexport default CareScale"],"mappings":";;yCAGA;AACA;AAAA,SAAAA,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,GAAG;EACrB,CAAC,EAAE,KAAK;EACR,CAAC,EAAE,YAAY;EACf,CAAC,EAAE;AACJ,CAAC;AAED,SAASC,SAASA,CAAC;EAAEC,UAAU;EAAEC;AAAS,CAAC,EAAE;EAC5C,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACvB,MAAMC,SAAS,GACdF,QAAQ,KAAK,OAAO,gBACnBJ,OAAA;IAAKO,GAAG,EAAEC,GAAI;IAACC,GAAG,EAAC;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBAEhCb,OAAA;IAAKO,GAAG,EAAEO,KAAM;IAACL,GAAG,EAAC;EAAY;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CACnC;EAEF,oBACCb,OAAA;IACCe,OAAO,EAAEA,CAAA,KACRC,KAAK,CACH,yBAAwBf,aAAa,CAACE,UAAU,CAAE,IAClDC,QAAQ,KAAK,OAAO,GAAG,YAAY,GAAG,YACtC,EACF,CACA;IAAAa,QAAA,EAEAZ,KAAK,CAACa,GAAG,CAAEC,SAAS,IACpBhB,UAAU,IAAIgB,SAAS,gBACtBnB,OAAA;MAAAiB,QAAA,EAAkCX;IAAS,GAAhCa,SAAS,CAACC,QAAQ,CAAC,CAAC;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAmB,CAAC,GAChD,IACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAER;AAACQ,EAAA,GA1BQnB,SAAS;AA4BlB,eAAeA,SAAS;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}